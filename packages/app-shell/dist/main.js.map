{
  "version": 3,
  "sources": ["../src/util/http.mjs", "../src/util/module.mjs", "../src/util/map-routes-for-modules.mjs", "../src/stores/app-config.mjs", "../src/stores/layout.mjs", "../src/util/get-start-path.mjs", "../src/main.mjs"],
  "sourcesContent": ["// @ts-nocheck\nfunction createError (type, response) {\n  const error = Error(type)\n  error.response = response\n  return error\n}\n\nfunction handleErrors (res) {\n  if (res.ok) {\n    return res\n  }\n\n  if (res.statusText !== '') {\n    throw createError(res.statusText, res)\n  }\n\n  const requestErrors = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    408: 'Request Timeout',\n    409: 'Conflict',\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Server Unavailable',\n    504: 'Gateway Timeout'\n  }\n\n  const errorType = requestErrors[res.status]\n\n  if (errorType) {\n    throw createError(errorType, res)\n  }\n\n  throw res\n}\n\nfunction handleResponses (res) {\n  if (res.status === 204) {\n    return null\n  }\n  return res.json()\n}\n\nexport function httpGet (url, headers) {\n  return window\n    .fetch(url, {\n      method: 'GET',\n      headers: headers\n    })\n    .then(handleErrors)\n    .then(handleResponses)\n}\n", "export function use (module, { ...args }) {\n  if (module.create && typeof module.create === 'function') {\n    return module.create({\n      ...args,\n      use\n    })\n  }\n}\n", "// @ts-nocheck\nimport { addMatcherToRoute } from './shell-runtime.mjs'\n\nexport function mapRoutesForModules (data) {\n  if (!data || !data.modules) return data\n  data.modules = data.modules.map(module => {\n    if (module.routes) {\n      module.routes = module.routes.map(route => addMatcherToRoute(route))\n    }\n    return module\n  })\n  return data\n}\n", "// @ts-nocheck\nimport * as helpers from '../util/shell-runtime.mjs'\nimport { storeNames } from './constants.mjs'\nimport { httpGet } from '../util/http.mjs'\nimport { use } from '../util/module.mjs'\nimport { mapRoutesForModules } from '../util/map-routes-for-modules.mjs'\n\nhelpers.createAppState(storeNames.APP_CONFIG, {\n  initialState: {\n    appConfig: {\n      loaded: false,\n      data: null,\n      modules: null\n    },\n    error: null\n  },\n  loadAppConfigIfNotLoaded (url) {\n    return !this.state.appConfig.loaded ? this.loadAppConfig(url) : Promise.resolve()\n  },\n  loadAppConfig (url) {\n    const that = this\n    return new Promise((resolve, reject) => {\n      httpGet(url, {\n        'Content-type': 'application/json'\n      })\n        .then(data => that.loadConfigModules(data))\n        .then(data => {\n          that.setState(state => ({ ...state, appConfig: { ...state.appConfig, loaded: true, data: mapRoutesForModules(data) } }))\n          resolve()\n        })\n        .catch(e => reject(e))\n    })\n  },\n  getModuleUrlByLocation (url) {\n    const module = this.state.appConfig.data.modules.find(m => m.routes.find(r => r.matcher(url)))\n    return module ? module.moduleUrl : undefined\n  },\n  hasModuleRoutes () {\n    const modules = this.state.appConfig.data.modules.filter(m => m.routes && m.routes.length > 0)\n    return modules.length > 0\n  },\n  hasModuleMessageBundles () {\n    const modules = this.state.appConfig.data.modules.filter(m => m.messageBundleUrl)\n    return modules.length > 0\n  },\n  loadConfigModules (appConfig) {\n    return Promise.all(\n      appConfig.modules.filter(m => m.preload).map(module => this.loadModuleByModuleUrl(module.moduleUrl))\n    ).then(() => {\n      return Promise.resolve(appConfig)\n    })\n  },\n  loadModuleByModuleUrl (url) {\n    const that = this\n    const modules = that.state.appConfig.data.modules\n    const module = modules.find(m => m.moduleUrl === url)\n    return that.loadModule(module)\n      .then(() => {\n        module.loaded = true\n        that.setState(state => ({ ...state, appConfig: { ...state.appConfig, data: { ...state.appConfig.data, modules } } }))\n      })\n  },\n  loadModuleByPath (path) {\n    const that = this\n    const modules = that.state.appConfig.data.modules\n    const module = modules.find(m => m.routes.find(r => r.path === path))\n    return that.loadModule(module)\n      .then(() => {\n        module.loaded = true\n        that.setState(state => ({ ...state, appConfig: { ...state.appConfig, data: { ...state.appConfig.data, modules } } }))\n      })\n  },\n  loadModuleByUrl (url) {\n    const that = this\n    const modules = that.state.appConfig.data.modules\n    const module = modules.find(m => m.routes.find(r => r.matcher(url)))\n    return that.loadModule(module)\n      .then(() => {\n        module.loaded = true\n        that.setState(state => ({ ...state, appConfig: { ...state.appConfig, data: { ...state.appConfig.data, modules } } }))\n      })\n  },\n  loadModule (module) {\n    if (module && module.loaded) {\n      return Promise.resolve()\n    }\n    if (!module) {\n      return Promise.reject(new Error('Module not found'))\n    }\n    return import(/* @vite-ignore */module.moduleUrl)\n      .then(m => {\n        use(m.module, helpers)\n      })\n  }\n})\n", "import { createAppState, createPersist } from '../util/shell-runtime.mjs'\nimport { storeNames } from './constants.mjs'\n\ncreateAppState(storeNames.LAYOUT, {\n  initialState: {\n    layout: {\n      appbar: true,\n      navigation: true\n    },\n    appTitle: null,\n    appVersion: null,\n    pageTitle: {\n      loading: true,\n      title: null,\n      subtitle: null\n    }\n  },\n  persist: createPersist(storeNames.LAYOUT, 'local'),\n  setPageTitle (title) {\n    document.title = title\n  }\n})\n", "import { getAppState, getRouter } from '../util/shell-runtime.mjs'\nimport { storeNames } from '../stores/constants.mjs'\n\nexport function getStartPath () {\n  const appConfigStore = getAppState(storeNames.APP_CONFIG)\n  if (appConfigStore.state.appConfig.loaded) {\n    const router = getRouter()\n    const dataStartPath = appConfigStore.getState('appConfig.data.startPath')\n    if (router.hasRoute(router.location.pathname)) {\n      return router.location.pathname\n    } else if (router.location.pathname === '/' && router.location.pathname !== dataStartPath) {\n      return dataStartPath\n    } else {\n      return router.location.pathname\n    }\n  }\n  return '/'\n}\n", "// @ts-nocheck\nimport './stores/index.mjs'\nimport { getAppState } from './util/shell-runtime.mjs'\nimport { storeNames } from './stores/constants.mjs'\nimport { getStartPath } from './util/get-start-path.mjs'\n\nfunction appConfigLoaded () {\n  const hasModuleRoutes = appConfigStore.hasModuleRoutes()\n  const hasModuleMessageBundles = appConfigStore.hasModuleMessageBundles()\n  const routerImport = hasModuleRoutes ? import('./router.mjs') : Promise.resolve()\n  const i18nImport = hasModuleMessageBundles ? import('./i18n.mjs') : Promise.resolve()\n  return Promise.all([\n    routerImport,\n    i18nImport\n  ])\n    .then(([routerModule, _i18nModule]) => {\n      if (routerModule) {\n        const router = routerModule.router\n        const startPath = getStartPath()\n        const moduleUrl = appConfigStore.getModuleUrlByLocation(startPath)\n        moduleUrl\n          ? appConfigStore.loadModuleByModuleUrl(moduleUrl).then(() => router.start(startPath))\n          : router.start(startPath)\n      }\n    })\n}\n\nconst appConfigStore = getAppState(storeNames.APP_CONFIG)\n\nif (window.ficusShellRuntime && window.ficusShellRuntime.configUrl) {\n  appConfigStore.loadAppConfigIfNotLoaded(window.ficusShellRuntime.configUrl)\n    .then(appConfigLoaded)\n}\n"],
  "mappings": "8GACA,SAASA,EAAaC,EAAMC,EAAU,CACpC,IAAMC,EAAQ,MAAMF,CAAI,EACxB,OAAAE,EAAM,SAAWD,EACVC,CACT,CAEA,SAASC,EAAcC,EAAK,CAC1B,GAAIA,EAAI,GACN,OAAOA,EAGT,GAAIA,EAAI,aAAe,GACrB,MAAML,EAAYK,EAAI,WAAYA,CAAG,EAiBvC,IAAMC,EAdgB,CACpB,IAAK,cACL,IAAK,eACL,IAAK,YACL,IAAK,YACL,IAAK,kBACL,IAAK,WACL,IAAK,wBACL,IAAK,kBACL,IAAK,cACL,IAAK,qBACL,IAAK,iBACP,EAEgCD,EAAI,QAEpC,MAAIC,EACIN,EAAYM,EAAWD,CAAG,EAG5BA,CACR,CAEA,SAASE,EAAiBF,EAAK,CAC7B,OAAIA,EAAI,SAAW,IACV,KAEFA,EAAI,KAAK,CAClB,CAEO,SAASG,EAASC,EAAKC,EAAS,CACrC,OAAO,OACJ,MAAMD,EAAK,CACV,OAAQ,MACR,QAASC,CACX,CAAC,EACA,KAAKN,CAAY,EACjB,KAAKG,CAAe,CACzB,CCtDO,SAASI,EAAKC,EAAQ,IAAKC,CAAK,EAAG,CACxC,GAAID,EAAO,QAAU,OAAOA,EAAO,QAAW,WAC5C,OAAOA,EAAO,OAAO,CACnB,GAAGC,EACH,IAAAF,CACF,CAAC,CAEL,CCJO,SAASG,EAAqBC,EAAM,CACzC,MAAI,CAACA,GAAQ,CAACA,EAAK,UACnBA,EAAK,QAAUA,EAAK,QAAQ,IAAIC,IAC1BA,EAAO,SACTA,EAAO,OAASA,EAAO,OAAO,IAAIC,GAASC,EAAkBD,CAAK,CAAC,GAE9DD,EACR,GACMD,CACT,CCLQI,EAAeC,EAAW,WAAY,CAC5C,aAAc,CACZ,UAAW,CACT,OAAQ,GACR,KAAM,KACN,QAAS,IACX,EACA,MAAO,IACT,EACA,yBAA0BC,EAAK,CAC7B,OAAQ,KAAK,MAAM,UAAU,OAAmC,QAAQ,QAAQ,EAA1C,KAAK,cAAcA,CAAG,CAC9D,EACA,cAAeA,EAAK,CAClB,IAAMC,EAAO,KACb,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAQJ,EAAK,CACX,eAAgB,kBAClB,CAAC,EACE,KAAKK,GAAQJ,EAAK,kBAAkBI,CAAI,CAAC,EACzC,KAAKA,GAAQ,CACZJ,EAAK,SAASK,IAAU,CAAE,GAAGA,EAAO,UAAW,CAAE,GAAGA,EAAM,UAAW,OAAQ,GAAM,KAAMC,EAAoBF,CAAI,CAAE,CAAE,EAAE,EACvHH,EAAQ,CACV,CAAC,EACA,MAAMM,GAAKL,EAAOK,CAAC,CAAC,CACzB,CAAC,CACH,EACA,uBAAwBR,EAAK,CAC3B,IAAMS,EAAS,KAAK,MAAM,UAAU,KAAK,QAAQ,KAAKC,GAAKA,EAAE,OAAO,KAAKC,GAAKA,EAAE,QAAQX,CAAG,CAAC,CAAC,EAC7F,OAAOS,EAASA,EAAO,UAAY,MACrC,EACA,iBAAmB,CAEjB,OADgB,KAAK,MAAM,UAAU,KAAK,QAAQ,OAAOC,GAAKA,EAAE,QAAUA,EAAE,OAAO,OAAS,CAAC,EAC9E,OAAS,CAC1B,EACA,yBAA2B,CAEzB,OADgB,KAAK,MAAM,UAAU,KAAK,QAAQ,OAAOA,GAAKA,EAAE,gBAAgB,EACjE,OAAS,CAC1B,EACA,kBAAmBE,EAAW,CAC5B,OAAO,QAAQ,IACbA,EAAU,QAAQ,OAAOF,GAAKA,EAAE,OAAO,EAAE,IAAID,GAAU,KAAK,sBAAsBA,EAAO,SAAS,CAAC,CACrG,EAAE,KAAK,IACE,QAAQ,QAAQG,CAAS,CACjC,CACH,EACA,sBAAuBZ,EAAK,CAC1B,IAAMC,EAAO,KACPY,EAAUZ,EAAK,MAAM,UAAU,KAAK,QACpCQ,EAASI,EAAQ,KAAKH,GAAKA,EAAE,YAAcV,CAAG,EACpD,OAAOC,EAAK,WAAWQ,CAAM,EAC1B,KAAK,IAAM,CACVA,EAAO,OAAS,GAChBR,EAAK,SAASK,IAAU,CAAE,GAAGA,EAAO,UAAW,CAAE,GAAGA,EAAM,UAAW,KAAM,CAAE,GAAGA,EAAM,UAAU,KAAM,QAAAO,CAAQ,CAAE,CAAE,EAAE,CACtH,CAAC,CACL,EACA,iBAAkBC,EAAM,CACtB,IAAMb,EAAO,KACPY,EAAUZ,EAAK,MAAM,UAAU,KAAK,QACpCQ,EAASI,EAAQ,KAAKH,GAAKA,EAAE,OAAO,KAAKC,GAAKA,EAAE,OAASG,CAAI,CAAC,EACpE,OAAOb,EAAK,WAAWQ,CAAM,EAC1B,KAAK,IAAM,CACVA,EAAO,OAAS,GAChBR,EAAK,SAASK,IAAU,CAAE,GAAGA,EAAO,UAAW,CAAE,GAAGA,EAAM,UAAW,KAAM,CAAE,GAAGA,EAAM,UAAU,KAAM,QAAAO,CAAQ,CAAE,CAAE,EAAE,CACtH,CAAC,CACL,EACA,gBAAiBb,EAAK,CACpB,IAAMC,EAAO,KACPY,EAAUZ,EAAK,MAAM,UAAU,KAAK,QACpCQ,EAASI,EAAQ,KAAKH,GAAKA,EAAE,OAAO,KAAKC,GAAKA,EAAE,QAAQX,CAAG,CAAC,CAAC,EACnE,OAAOC,EAAK,WAAWQ,CAAM,EAC1B,KAAK,IAAM,CACVA,EAAO,OAAS,GAChBR,EAAK,SAASK,IAAU,CAAE,GAAGA,EAAO,UAAW,CAAE,GAAGA,EAAM,UAAW,KAAM,CAAE,GAAGA,EAAM,UAAU,KAAM,QAAAO,CAAQ,CAAE,CAAE,EAAE,CACtH,CAAC,CACL,EACA,WAAYJ,EAAQ,CAClB,OAAIA,GAAUA,EAAO,OACZ,QAAQ,QAAQ,EAEpBA,EAGE,OAAyBA,EAAO,WACpC,KAAKC,GAAK,CACTK,EAAIL,EAAE,OAAQM,CAAO,CACvB,CAAC,EALM,QAAQ,OAAO,IAAI,MAAM,kBAAkB,CAAC,CAMvD,CACF,CAAC,EC3FDC,EAAeC,EAAW,OAAQ,CAChC,aAAc,CACZ,OAAQ,CACN,OAAQ,GACR,WAAY,EACd,EACA,SAAU,KACV,WAAY,KACZ,UAAW,CACT,QAAS,GACT,MAAO,KACP,SAAU,IACZ,CACF,EACA,QAASC,EAAcD,EAAW,OAAQ,OAAO,EACjD,aAAcE,EAAO,CACnB,SAAS,MAAQA,CACnB,CACF,CAAC,EClBM,SAASC,GAAgB,CAC9B,IAAMC,EAAiBC,EAAYC,EAAW,UAAU,EACxD,GAAIF,EAAe,MAAM,UAAU,OAAQ,CACzC,IAAMG,EAASC,EAAU,EACnBC,EAAgBL,EAAe,SAAS,0BAA0B,EACxE,OAAIG,EAAO,SAASA,EAAO,SAAS,QAAQ,EACnCA,EAAO,SAAS,SACdA,EAAO,SAAS,WAAa,KAAOA,EAAO,SAAS,WAAaE,EACnEA,EAEAF,EAAO,SAAS,QAE3B,CACA,MAAO,GACT,CCXA,SAASG,GAAmB,CAC1B,IAAMC,EAAkBC,EAAe,gBAAgB,EACjDC,EAA0BD,EAAe,wBAAwB,EACjEE,EAAeH,EAAkB,OAAO,wBAAkB,QAAQ,QAAQ,EAC1EI,EAAaF,EAA0B,OAAO,sBAAgB,QAAQ,QAAQ,EACpF,OAAO,QAAQ,IAAI,CACjBC,EACAC,CACF,CAAC,EACE,KAAK,CAAC,CAACC,EAAcC,CAAW,IAAM,CACrC,GAAID,EAAc,CAChB,IAAME,EAASF,EAAa,OACtBG,EAAYC,EAAa,EACzBC,EAAYT,EAAe,uBAAuBO,CAAS,EACjEE,EACIT,EAAe,sBAAsBS,CAAS,EAAE,KAAK,IAAMH,EAAO,MAAMC,CAAS,CAAC,EAClFD,EAAO,MAAMC,CAAS,CAC5B,CACF,CAAC,CACL,CAEA,IAAMP,EAAiBU,EAAYC,EAAW,UAAU,EAEpD,OAAO,mBAAqB,OAAO,kBAAkB,WACvDX,EAAe,yBAAyB,OAAO,kBAAkB,SAAS,EACvE,KAAKF,CAAe",
  "names": ["createError", "type", "response", "error", "handleErrors", "res", "errorType", "handleResponses", "httpGet", "url", "headers", "use", "module", "args", "mapRoutesForModules", "data", "module", "route", "addMatcherToRoute", "createAppState", "storeNames", "url", "that", "resolve", "reject", "httpGet", "data", "state", "mapRoutesForModules", "e", "module", "m", "r", "appConfig", "modules", "path", "use", "shell_runtime_exports", "createAppState", "storeNames", "createPersist", "title", "getStartPath", "appConfigStore", "getAppState", "storeNames", "router", "getRouter", "dataStartPath", "appConfigLoaded", "hasModuleRoutes", "appConfigStore", "hasModuleMessageBundles", "routerImport", "i18nImport", "routerModule", "_i18nModule", "router", "startPath", "getStartPath", "moduleUrl", "getAppState", "storeNames"]
}
