{
  "version": 3,
  "sources": ["../src/util/event-names.mjs", "../src/router.mjs"],
  "sourcesContent": ["export const eventNames = Object.freeze({\n  FICUS_APP_SHELL_ERROR: 'ficus.app.shell.error',\n  FICUS_APP_SHELL_IS_OFFLINE: 'ficus.app.shell.is.offline',\n  FICUS_APP_SHELL_OFFLINE: 'ficus.app.shell.offline',\n  FICUS_APP_SHELL_ONLINE: 'ficus.app.shell.online'\n})\n", "// @ts-nocheck\nimport { createRouter } from '@ficusjs/router'\nimport { storeNames } from './stores/constants.mjs'\nimport { getAppState, getEventBus } from './util/shell-runtime.mjs'\nimport { eventNames } from './util/event-names.mjs'\n\nfunction getRouterOutletSelector () {\n  return window.ficusShellRuntime && window.ficusShellRuntime.routerOutletSelector\n    ? window.ficusShellRuntime.routerOutletSelector\n    : '#router-outlet'\n}\n\nfunction getRouterMode () {\n  return window.ficusShellRuntime && window.ficusShellRuntime.routerMode\n    ? window.ficusShellRuntime.routerMode\n    : 'hash'\n}\n\nfunction getModuleUrlByLocation (pathname) {\n  const appConfigStore = getAppState(storeNames.APP_CONFIG)\n  return appConfigStore.getModuleUrlByLocation(pathname)\n}\n\nfunction loadModuleByModuleUrl (moduleUrl) {\n  const appConfigStore = getAppState(storeNames.APP_CONFIG)\n  return appConfigStore.loadModuleByModuleUrl(moduleUrl)\n}\n\nexport const router = createRouter([], getRouterOutletSelector(), {\n  autoStart: false,\n  context: { eventBus: getEventBus() },\n  resolveRoute (context, params) {\n    const appConfigStore = getAppState(storeNames.APP_CONFIG)\n    const dataStartPath = appConfigStore.getState('appConfig.data.startPath')\n    if (context.location.pathname === '/' && context.location.pathname !== dataStartPath) {\n      return { redirect: dataStartPath }\n    }\n    if (context.route && typeof context.route.action === 'function') {\n      return context.route.action(context, params)\n    }\n    if (!context.route) {\n      const moduleUrl = getModuleUrlByLocation(context.location.pathname)\n      return moduleUrl\n        ? loadModuleByModuleUrl(moduleUrl).then(() => {\n            if (context.route && typeof context.route.action === 'function') {\n              return context.route.action(context, params)\n            }\n          })\n        : undefined\n    }\n  },\n  errorHandler (error, routeContext) {\n    const moduleUrl = getModuleUrlByLocation(routeContext.location.pathname)\n    if (moduleUrl) {\n      return loadModuleByModuleUrl(moduleUrl).then(() => {\n        if (routeContext.route && typeof routeContext.route.action === 'function') {\n          return routeContext.route.action(routeContext, routeContext.params)\n        }\n      })\n    } else {\n      routeContext.context.eventBus.publish(eventNames.FICUS_APP_SHELL_ERROR, error)\n    }\n  },\n  mode: getRouterMode()\n})\n"],
  "mappings": "yFAAO,IAAMA,EAAa,OAAO,OAAO,CACtC,sBAAuB,wBACvB,2BAA4B,6BAC5B,wBAAyB,0BACzB,uBAAwB,wBAC1B,CAAC,ECCD,SAASC,GAA2B,CAClC,OAAO,OAAO,mBAAqB,OAAO,kBAAkB,qBACxD,OAAO,kBAAkB,qBACzB,gBACN,CAEA,SAASC,GAAiB,CACxB,OAAO,OAAO,mBAAqB,OAAO,kBAAkB,WACxD,OAAO,kBAAkB,WACzB,MACN,CAEA,SAASC,EAAwBC,EAAU,CAEzC,OADuBC,EAAYC,EAAW,UAAU,EAClC,uBAAuBF,CAAQ,CACvD,CAEA,SAASG,EAAuBC,EAAW,CAEzC,OADuBH,EAAYC,EAAW,UAAU,EAClC,sBAAsBE,CAAS,CACvD,CAEO,IAAMC,EAASC,EAAa,CAAC,EAAGT,EAAwB,EAAG,CAChE,UAAW,GACX,QAAS,CAAE,SAAUU,EAAY,CAAE,EACnC,aAAcC,EAASC,EAAQ,CAE7B,IAAMC,EADiBT,EAAYC,EAAW,UAAU,EACnB,SAAS,0BAA0B,EACxE,GAAIM,EAAQ,SAAS,WAAa,KAAOA,EAAQ,SAAS,WAAaE,EACrE,MAAO,CAAE,SAAUA,CAAc,EAEnC,GAAIF,EAAQ,OAAS,OAAOA,EAAQ,MAAM,QAAW,WACnD,OAAOA,EAAQ,MAAM,OAAOA,EAASC,CAAM,EAE7C,GAAI,CAACD,EAAQ,MAAO,CAClB,IAAMJ,EAAYL,EAAuBS,EAAQ,SAAS,QAAQ,EAClE,OAAOJ,EACHD,EAAsBC,CAAS,EAAE,KAAK,IAAM,CAC1C,GAAII,EAAQ,OAAS,OAAOA,EAAQ,MAAM,QAAW,WACnD,OAAOA,EAAQ,MAAM,OAAOA,EAASC,CAAM,CAE/C,CAAC,EACD,MACN,CACF,EACA,aAAcE,EAAOC,EAAc,CACjC,IAAMR,EAAYL,EAAuBa,EAAa,SAAS,QAAQ,EACvE,GAAIR,EACF,OAAOD,EAAsBC,CAAS,EAAE,KAAK,IAAM,CACjD,GAAIQ,EAAa,OAAS,OAAOA,EAAa,MAAM,QAAW,WAC7D,OAAOA,EAAa,MAAM,OAAOA,EAAcA,EAAa,MAAM,CAEtE,CAAC,EAEDA,EAAa,QAAQ,SAAS,QAAQC,EAAW,sBAAuBF,CAAK,CAEjF,EACA,KAAMb,EAAc,CACtB,CAAC",
  "names": ["eventNames", "getRouterOutletSelector", "getRouterMode", "getModuleUrlByLocation", "pathname", "getAppState", "storeNames", "loadModuleByModuleUrl", "moduleUrl", "router", "createRouter", "getEventBus", "context", "params", "dataStartPath", "error", "routeContext", "eventNames"]
}
